<template>
  <div>
    <div>
      <titleComponent :text="'Alunos'" />
    </div>
    <div class="content-box">
      <div class="left-content">
        <label><h3>Formulario Alunos</h3></label>

        <div>
          <input
            class="left-input"
            type="text"
            placeholder="Nome do aluno"
            v-model="nome.value"
          />
        </div>

        <div>
          <input
            class="right-input"
            type="text"
            placeholder="Sobrenome"
            v-model="sobrenome.value"
          />
        </div>

        <div>
          <input
            class="left-input"
            type="text"
            placeholder="matricula"
            v-model="matricula.value"
          />
        </div>

        <div>
          <select class="right-input" v-model="professor.value">
            <option v-for="professor in professores" :key="professor.id">
              {{ professor.nome }}
            </option>
          </select>
        </div>

        <input hidden type="text" v-model="editing.value" />
        <input hidden type="text" v-model="id.value" />
        <button class="btn-save" @click="addAluno()">
          <font-awesome-icon icon="fa-solid fa-floppy-disk" /> SAVE
        </button>
      </div>
      <div class="right-content">
        <label><h3>Tabela Alunos</h3></label>
        <table>
          <thead>
            <tr>
              <td>Nome</td>
              <td>Matricula</td>
              <td>Opções</td>
            </tr>
          </thead>
          <tbody>
            <tr v-for="alunoObj in alunos" :key="alunoObj.id">
              <td data-label="Nome">{{ alunoObj.nome }} {{ alunoObj.sobrenome }}</td>
              <td data-label="Matricula">{{ alunoObj.matricula }}</td>
              <td data-label="Opções">
                <button @click="deleteAluno(alunoObj)" class="btn-danger">
                  <font-awesome-icon icon="fa-solid fa-trash" />
                </button>
                <button @click="editingAluno(alunoObj.id)" class="btn-edit">
                  <font-awesome-icon icon="fa-solid fa-pen" />
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <br />
  </div>
</template>

<script setup>
import { ref, onBeforeMount, inject } from "vue";
import { useToast } from "vue-toastification";

const toast = useToast();

const alunoConnectionString = 'http://192.168.1.7:3000/alunos';
const profConnectionString = 'http://192.168.1.7:3000/professores';

let nome = ref({ String });
let sobrenome = ref({ String });
let matricula = ref({ String });
let editing = ref({ Boolean });
let id = ref({ String });
let professores = ref([
  {
    id: String,
    nome: String,
    sobrenome: String,
    matricula: String,
    editing: Boolean,
  },
]);

let professor = ref({
  id: String,
  nome: String,
  sobrenome: String,
  matricula: String,
  editing: Boolean,
});

let alunoObj = ref(
  {
    nome: String,
    sobrenome: String,
    matricula: String,
    editing: Boolean,
    professorId: String,
  },
);

let alunos = ref([
  {
    nome: String,
    sobrenome: String,
    matricula: String,
    editing: Boolean,
    professorId: String,
  },
]);

/* ---------------------------------------------------------------------------------------------------------------------------------------FUNCTIONS */

const axios = inject("axios");

onBeforeMount(async () => {
  await getAlunoData();
  await getProfData();
});

async function getAlunoData() {
  await axios
    .get(alunoConnectionString)
    .then((response) => response.data)
    .then((response) => (alunos.value = response))
    .catch((err) => console.log(err.message));
    console.log(alunos.value);
  return alunos.value;
}

async function getProfData() {
  await axios
    .get(profConnectionString)
    .then((response) => response.data)
    .then((response) => (professores.value = response))
    .catch((err) => console.log(err.message));
    console.log(professor.value);
  return professores.value;
}

async function addAluno() {
  alunos.value = await getAlunoData();

  let reapetedEntry = false;

  if (
    (!this.nome.value || !this.sobrenome.value || !this.matricula.value) &&
    this.editing.value != true
  ) {
    toast.warning("Missing content");
    reapetedEntry = true;
    return { toast };
  } else {
    alunos.value.forEach((aluno) => {
      if (
        (
          String(this.nome.value).trim() + String(this.sobrenome.value).trim()
        ).toLowerCase() ==
          (
            String(aluno.nome).trim() + String(aluno.sobrenome).trim()
          ).toLowerCase() &&
        this.editing.value != true
      ) {
        toast.warning("Name registered already!");
        reapetedEntry = true;
        return { toast };
      }
      if (
        String(this.matricula.value).trim() == String(aluno.matricula).trim() &&
        this.editing.value != true
      ) {
        toast.warning("Registration number already registered!");
        reapetedEntry = true;
        return { toast };
      }
    });

    if (!reapetedEntry) {
      const aluno = {
        professor: this.professor.id.value,
        nome: String(this.nome.value).trim(),
        sobrenome: String(this.sobrenome.value).trim(),
        matricula: String(this.matricula.value).trim(),
        id: this.id.value,
        editing: false,
      };

      console.log('criou obj aluno com id do prof', aluno);

      if (this.editing.value == true) {
        if (
          !this.nome.value ||
          !this.sobrenome.value ||
          !this.matricula.value
        ) {
          toast.warning("Missing content");
          return { toast };
        } else {
          await axios
            .patch(alunoConnectionString + `/${aluno.id}`, aluno)
            .then((res) => console.log(res.data))
            .then(() => {
              toast.success("Edited");
            });
        }
      } else {
        await axios
          .post(alunoConnectionString, aluno)
          .then((res) => console.log(res.data))
          .then(() => {
            toast.success("Created");
          });
      }

      await getAlunoData();
    }

    this.nome.value = "";
    this.sobrenome.value = "";
    this.matricula.value = "";
    this.editing.value = "";
    this.professor.value = "";
  }
}

async function editingAluno(id) {
  console.log(id);
  await axios
    .get(alunoConnectionString + `/${id}`)
    .then((res) => res.data)
    .then((res) => (alunoObj.value = res))
    .then(() => {
      this.nome.value = alunoObj.value.nome;
      this.sobrenome.value = alunoObj.value.sobrenome;
      this.matricula.value = alunoObj.value.matricula;
      this.id.value = alunoObj.value.id;
      this.editing.value = true;
    })
    .then(async () => {
      await axios.get(profConnectionString + `/${alunoObj.value.professorId}`)
        .then(res => res.data)
        .then(res => this.professor.value = res)
        .then(() => console.log(this.professor.value))
    }); 
}

async function deleteAluno(aluno) {
  console.log(aluno.id);

  console.log(alunoConnectionString + `/${aluno.id}`);

  await axios.delete(alunoConnectionString + `/${aluno.id}`).then(() => {
    let index = alunos.value.indexOf(aluno);
    console.log(index);
    alunos.value.splice(index, 1);
    toast.success("Deleted");

    return { toast };
  });
}
</script>

<!--------------------------------------------------------------------------------- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.content-box {
  padding: 0;
  margin: 0;
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  gap: 2rem;
}

.content-box > * {
  flex: 1;
}

.right-content {
}

.left-content {
  flex-direction: column;
  flex-wrap: wrap;
}

.left-content > *{
  flex: 1;
}

table {
  width: 100%;
  border: none;
  border-radius: 5px;
  border-collapse: collapse;
}

thead {
  font-weight: bold;
  background-color: #1b2733;
  color: rgb(0, 195, 255);
}

tbody tr:nth-child(odd) {
  background-color: #2c3e50;
  font-size: 0.9em;
  text-align: center;
}

tbody tr:nth-child(even) {
  background-color: #22303f;
  font-size: 0.9em;
  text-align: center;
}

input,
select {
  width: 48%;
  border-radius: 5px;
  padding: 8px 5px;
  margin: 0;
}

.left-input{
  float: left;

}

.right-input{
  float: right;
}

.btn-save {
  color: rgb(1, 207, 1);
  width: 50%;
}

.btn-save:hover {
  background-color: rgb(1, 207, 1);
  color: white;
}

.btn-edit {
  color: blue;
}

.btn-edit:hover {
  background-color: blue;
  color: white;
}

.btn-danger {
  background-color: white;
  color: red;
}

.btn-danger:hover {
  background-color: red;
  color: white;
}

/*----------------- LOCAL BREAK POINTS */
@media only screen and (max-width: 500px) {
  thead {
    display: none;
  }

  table,
  tbody,
  tr,
  td {
    display: block;
    width: 100%;
  }

  tr {
    padding-top: 10px;
    margin-top: 5px;
  }

  td {
    position: absolute;
    text-align: right;
    position: relative;
    border-collapse: collapse;
    padding-top: 5px;
    right: 0;
  }

  td::before {
    display: block;
    content: attr(data-label);
    left: 0;
    width: 50%;
    padding-left: 15px;
    font-weight: bold;
    text-align: left;
    color: rgb(0, 195, 255);
  }

  td:hover {
    border: 1px solid white;
  }

  .btn-danger,
  .btn-edit {
    display: inline;
    justify-content: center;
    align-items: center;
    height: 30px;
    width: 70px;
    font-size: 10px;
  }
}

@media only screen and (max-width: 768px) {
  .content-box {
    flex-direction: column;
  }
}
</style>
